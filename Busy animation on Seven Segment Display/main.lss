
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000326  00000000  00000000  000001ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000119  00000000  00000000  000004d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000238  00000000  00000000  000005ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b8  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000fb  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000a07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

void blinkport(unsigned char portBit);
int main (void)
{
	DDRB = 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000111;	
  70:	87 e0       	ldi	r24, 0x07	; 7
  72:	81 bb       	out	0x11, r24	; 17
  74:	28 ee       	ldi	r18, 0xE8	; 232
  76:	33 e0       	ldi	r19, 0x03	; 3
	while(1)
	{	
		
		_delay_ms(100);
		PORTB = 0b00000001;
  78:	b1 e0       	ldi	r27, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	40 e2       	ldi	r20, 0x20	; 32
  7c:	5e e4       	ldi	r21, 0x4E	; 78
		_delay_ms(10);
		PORTD|= 1<< PIND2;
		_delay_ms(10);
		PORTD|= 1<< PIND3;
		_delay_ms(10);
		PORTD = 0b00001000;
  7e:	a8 e0       	ldi	r26, 0x08	; 8
		PORTB = 0b00100001;
  80:	f1 e2       	ldi	r31, 0x21	; 33
		_delay_ms(10);
		PORTB = 0b00111001;
  82:	e9 e3       	ldi	r30, 0x39	; 57
  84:	68 ec       	ldi	r22, 0xC8	; 200
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	05 c0       	rjmp	.+10     	; 0x94 <main+0x28>
  8a:	cb 01       	movw	r24, r22
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	21 50       	subi	r18, 0x01	; 1
  92:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	21 15       	cp	r18, r1
  96:	31 05       	cpc	r19, r1
  98:	c1 f7       	brne	.-16     	; 0x8a <main+0x1e>
	DDRD = 0b00000111;	
	while(1)
	{	
		
		_delay_ms(100);
		PORTB = 0b00000001;
  9a:	b8 bb       	out	0x18, r27	; 24
  9c:	ca 01       	movw	r24, r20
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x32>
		_delay_ms(10);
		PORTD|= 1<< PIND0;
  a2:	90 9a       	sbi	0x12, 0	; 18
  a4:	ca 01       	movw	r24, r20
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x3a>
		_delay_ms(10);
		PORTD|= 1<< PIND1;
  aa:	91 9a       	sbi	0x12, 1	; 18
  ac:	ca 01       	movw	r24, r20
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <main+0x42>
		_delay_ms(10);
		PORTD|= 1<< PIND2;
  b2:	92 9a       	sbi	0x12, 2	; 18
  b4:	ca 01       	movw	r24, r20
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4a>
		_delay_ms(10);
		PORTD|= 1<< PIND3;
  ba:	93 9a       	sbi	0x12, 3	; 18
  bc:	ca 01       	movw	r24, r20
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x52>
		_delay_ms(10);
		PORTD = 0b00001000;
  c2:	a2 bb       	out	0x12, r26	; 18
		PORTB = 0b00100001;
  c4:	f8 bb       	out	0x18, r31	; 24
  c6:	ca 01       	movw	r24, r20
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5c>
		_delay_ms(10);
		PORTB = 0b00111001;
  cc:	e8 bb       	out	0x18, r30	; 24
  ce:	ca 01       	movw	r24, r20
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x64>
		_delay_ms(10);
		PORTB = 0b00000000;
  d4:	18 ba       	out	0x18, r1	; 24
		PORTD = 0b00000000;
  d6:	12 ba       	out	0x12, r1	; 18
  d8:	28 ee       	ldi	r18, 0xE8	; 232
  da:	33 e0       	ldi	r19, 0x03	; 3
  dc:	d6 cf       	rjmp	.-84     	; 0x8a <main+0x1e>

000000de <blinkport>:
	
}

void blinkport(unsigned char portBit)
{
		PORTB ^= 1 << portBit;
  de:	98 b3       	in	r25, 0x18	; 24
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <blinkport+0xc>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <blinkport+0x8>
  ee:	92 27       	eor	r25, r18
  f0:	98 bb       	out	0x18, r25	; 24
  f2:	80 e1       	ldi	r24, 0x10	; 16
  f4:	97 e2       	ldi	r25, 0x27	; 39
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <blinkport+0x18>
		_delay_ms(5);
		PORTB ^= 1 << portBit;
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	28 27       	eor	r18, r24
  fe:	28 bb       	out	0x18, r18	; 24
 100:	80 e9       	ldi	r24, 0x90	; 144
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <blinkport+0x26>
		_delay_ms(0.2);
}
 108:	08 95       	ret

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
