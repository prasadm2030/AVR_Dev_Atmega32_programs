
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  00000280  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a3  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000238  00000000  00000000  00000343  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015f  00000000  00000000  0000057b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024f  00000000  00000000  000006da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000092c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000135  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  74:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ProcessPressedButton>:


}

void ProcessPressedButton(int ButtonPressed)
{
  7c:	bc 01       	movw	r22, r24
	pressed_confidence_level[ButtonPressed] ++;
  7e:	ac 01       	movw	r20, r24
  80:	44 0f       	add	r20, r20
  82:	55 1f       	adc	r21, r21
  84:	fa 01       	movw	r30, r20
  86:	e0 5a       	subi	r30, 0xA0	; 160
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	80 81       	ld	r24, Z
  8c:	91 81       	ldd	r25, Z+1	; 0x01
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	91 83       	std	Z+1, r25	; 0x01
  92:	80 83       	st	Z, r24
		  if (pressed_confidence_level[ButtonPressed]>600)
  94:	89 55       	subi	r24, 0x59	; 89
  96:	92 40       	sbci	r25, 0x02	; 2
  98:	0c f4       	brge	.+2      	; 0x9c <ProcessPressedButton+0x20>
  9a:	61 c0       	rjmp	.+194    	; 0x15e <ProcessPressedButton+0xe2>
		  {
				if (pressed[ButtonPressed]==0)
  9c:	fa 01       	movw	r30, r20
  9e:	e8 59       	subi	r30, 0x98	; 152
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 81       	ld	r24, Z
  a4:	91 81       	ldd	r25, Z+1	; 0x01
  a6:	89 2b       	or	r24, r25
  a8:	09 f0       	breq	.+2      	; 0xac <ProcessPressedButton+0x30>
  aa:	55 c0       	rjmp	.+170    	; 0x156 <ProcessPressedButton+0xda>
				{
					pressed[ButtonPressed]=1;
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	31 83       	std	Z+1, r19	; 0x01
  b2:	20 83       	st	Z, r18
					LEDnumber[ButtonPressed]++;
  b4:	fa 01       	movw	r30, r20
  b6:	e4 59       	subi	r30, 0x94	; 148
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	40 81       	ld	r20, Z
  bc:	51 81       	ldd	r21, Z+1	; 0x01
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	51 83       	std	Z+1, r21	; 0x01
  c4:	40 83       	st	Z, r20
					if (ButtonPressed==0) PORTB |=1 << LEDnumber[ButtonPressed];
  c6:	61 15       	cp	r22, r1
  c8:	71 05       	cpc	r23, r1
  ca:	51 f4       	brne	.+20     	; 0xe0 <ProcessPressedButton+0x64>
  cc:	88 b3       	in	r24, 0x18	; 24
  ce:	04 2e       	mov	r0, r20
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <ProcessPressedButton+0x5a>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <ProcessPressedButton+0x56>
  da:	82 2b       	or	r24, r18
  dc:	88 bb       	out	0x18, r24	; 24
  de:	0d c0       	rjmp	.+26     	; 0xfa <ProcessPressedButton+0x7e>
					if (ButtonPressed==1) PORTD |=1 << LEDnumber[ButtonPressed];
  e0:	61 30       	cpi	r22, 0x01	; 1
  e2:	71 05       	cpc	r23, r1
  e4:	51 f4       	brne	.+20     	; 0xfa <ProcessPressedButton+0x7e>
  e6:	22 b3       	in	r18, 0x12	; 18
  e8:	cb 01       	movw	r24, r22
  ea:	04 2e       	mov	r0, r20
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <ProcessPressedButton+0x76>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <ProcessPressedButton+0x72>
  f6:	28 2b       	or	r18, r24
  f8:	22 bb       	out	0x12, r18	; 18
					if (LEDnumber[ButtonPressed]>6)
  fa:	47 30       	cpi	r20, 0x07	; 7
  fc:	51 05       	cpc	r21, r1
  fe:	5c f1       	brlt	.+86     	; 0x156 <ProcessPressedButton+0xda>
 100:	20 e0       	ldi	r18, 0x00	; 0
 102:	30 e0       	ldi	r19, 0x00	; 0
					{
						for (int i=0;i<10;i++)
						{
							if (ButtonPressed==0) PORTB= 0b10000000;
							if (ButtonPressed==1) PORTD= 0b10000000;
 104:	f0 e8       	ldi	r31, 0x80	; 128
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	40 e2       	ldi	r20, 0x20	; 32
 108:	5e e4       	ldi	r21, 0x4E	; 78
							_delay_ms(10);
							if (ButtonPressed==0) PORTB= 0b11111111;
							if (ButtonPressed==1) PORTD= 0b11111111;
 10a:	ef ef       	ldi	r30, 0xFF	; 255
					if (ButtonPressed==1) PORTD |=1 << LEDnumber[ButtonPressed];
					if (LEDnumber[ButtonPressed]>6)
					{
						for (int i=0;i<10;i++)
						{
							if (ButtonPressed==0) PORTB= 0b10000000;
 10c:	61 15       	cp	r22, r1
 10e:	71 05       	cpc	r23, r1
 110:	11 f4       	brne	.+4      	; 0x116 <ProcessPressedButton+0x9a>
 112:	f8 bb       	out	0x18, r31	; 24
 114:	04 c0       	rjmp	.+8      	; 0x11e <ProcessPressedButton+0xa2>
							if (ButtonPressed==1) PORTD= 0b10000000;
 116:	61 30       	cpi	r22, 0x01	; 1
 118:	71 05       	cpc	r23, r1
 11a:	09 f4       	brne	.+2      	; 0x11e <ProcessPressedButton+0xa2>
 11c:	f2 bb       	out	0x12, r31	; 18
 11e:	ca 01       	movw	r24, r20
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <ProcessPressedButton+0xa4>
							_delay_ms(10);
							if (ButtonPressed==0) PORTB= 0b11111111;
 124:	61 15       	cp	r22, r1
 126:	71 05       	cpc	r23, r1
 128:	11 f4       	brne	.+4      	; 0x12e <ProcessPressedButton+0xb2>
 12a:	e8 bb       	out	0x18, r30	; 24
 12c:	04 c0       	rjmp	.+8      	; 0x136 <ProcessPressedButton+0xba>
							if (ButtonPressed==1) PORTD= 0b11111111;
 12e:	61 30       	cpi	r22, 0x01	; 1
 130:	71 05       	cpc	r23, r1
 132:	09 f4       	brne	.+2      	; 0x136 <ProcessPressedButton+0xba>
 134:	e2 bb       	out	0x12, r30	; 18
 136:	ca 01       	movw	r24, r20
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <ProcessPressedButton+0xbc>
					LEDnumber[ButtonPressed]++;
					if (ButtonPressed==0) PORTB |=1 << LEDnumber[ButtonPressed];
					if (ButtonPressed==1) PORTD |=1 << LEDnumber[ButtonPressed];
					if (LEDnumber[ButtonPressed]>6)
					{
						for (int i=0;i<10;i++)
 13c:	2f 5f       	subi	r18, 0xFF	; 255
 13e:	3f 4f       	sbci	r19, 0xFF	; 255
 140:	2a 30       	cpi	r18, 0x0A	; 10
 142:	31 05       	cpc	r19, r1
 144:	19 f7       	brne	.-58     	; 0x10c <ProcessPressedButton+0x90>
							if (ButtonPressed==0) PORTB= 0b11111111;
							if (ButtonPressed==1) PORTD= 0b11111111;
							_delay_ms(10);
							
						}
						LEDnumber[0]=0;
 146:	10 92 6d 00 	sts	0x006D, r1
 14a:	10 92 6c 00 	sts	0x006C, r1
						LEDnumber[1]=0;
 14e:	10 92 6f 00 	sts	0x006F, r1
 152:	10 92 6e 00 	sts	0x006E, r1
					}
				}
			pressed_confidence_level[0]=0;
 156:	10 92 61 00 	sts	0x0061, r1
 15a:	10 92 60 00 	sts	0x0060, r1
 15e:	08 95       	ret

00000160 <main>:
int LEDnumber[2];

int main(void)
{	
	//initialization area. Setting up ports and data direction registers
	DDRB = 0b01111111;
 160:	8f e7       	ldi	r24, 0x7F	; 127
 162:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01111111;
 164:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b10000000;
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10000000;
 16a:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		if (bit_is_clear (PINB,7))
 16c:	b7 99       	sbic	0x16, 7	; 22
 16e:	05 c0       	rjmp	.+10     	; 0x17a <main+0x1a>
		{
		  ProcessPressedButton(0);  
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 3e 00 	call	0x7c	; 0x7c <ProcessPressedButton>
 178:	14 c0       	rjmp	.+40     	; 0x1a2 <main+0x42>

}

void ProcessReleasedbutton(int ButtonReleased)
{
	released_confidence_level[ButtonReleased]++;
 17a:	80 91 64 00 	lds	r24, 0x0064
 17e:	90 91 65 00 	lds	r25, 0x0065
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 65 00 	sts	0x0065, r25
 188:	80 93 64 00 	sts	0x0064, r24
			if (released_confidence_level[ButtonReleased]>600)
 18c:	89 55       	subi	r24, 0x59	; 89
 18e:	92 40       	sbci	r25, 0x02	; 2
 190:	44 f0       	brlt	.+16     	; 0x1a2 <main+0x42>
			{
				pressed[ButtonReleased]=0;
 192:	10 92 69 00 	sts	0x0069, r1
 196:	10 92 68 00 	sts	0x0068, r1
				released_confidence_level[ButtonReleased]=0;
 19a:	10 92 65 00 	sts	0x0065, r1
 19e:	10 92 64 00 	sts	0x0064, r1
		}
		else
		{
		  ProcessReleasedbutton(0);
		}
		if (bit_is_clear(PINB,7))
 1a2:	b7 99       	sbic	0x16, 7	; 22
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <main+0x50>
		{
		  ProcessPressedButton(1);
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 3e 00 	call	0x7c	; 0x7c <ProcessPressedButton>
 1ae:	de cf       	rjmp	.-68     	; 0x16c <main+0xc>

}

void ProcessReleasedbutton(int ButtonReleased)
{
	released_confidence_level[ButtonReleased]++;
 1b0:	80 91 66 00 	lds	r24, 0x0066
 1b4:	90 91 67 00 	lds	r25, 0x0067
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	90 93 67 00 	sts	0x0067, r25
 1be:	80 93 66 00 	sts	0x0066, r24
			if (released_confidence_level[ButtonReleased]>600)
 1c2:	89 55       	subi	r24, 0x59	; 89
 1c4:	92 40       	sbci	r25, 0x02	; 2
 1c6:	94 f2       	brlt	.-92     	; 0x16c <main+0xc>
			{
				pressed[ButtonReleased]=0;
 1c8:	10 92 6b 00 	sts	0x006B, r1
 1cc:	10 92 6a 00 	sts	0x006A, r1
				released_confidence_level[ButtonReleased]=0;
 1d0:	10 92 67 00 	sts	0x0067, r1
 1d4:	10 92 66 00 	sts	0x0066, r1
 1d8:	c9 cf       	rjmp	.-110    	; 0x16c <main+0xc>

000001da <ProcessReleasedbutton>:

}

void ProcessReleasedbutton(int ButtonReleased)
{
	released_confidence_level[ButtonReleased]++;
 1da:	fc 01       	movw	r30, r24
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	df 01       	movw	r26, r30
 1e2:	ac 59       	subi	r26, 0x9C	; 156
 1e4:	bf 4f       	sbci	r27, 0xFF	; 255
 1e6:	8d 91       	ld	r24, X+
 1e8:	9c 91       	ld	r25, X
 1ea:	11 97       	sbiw	r26, 0x01	; 1
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	9c 93       	st	X, r25
 1f2:	8e 93       	st	-X, r24
			if (released_confidence_level[ButtonReleased]>600)
 1f4:	89 55       	subi	r24, 0x59	; 89
 1f6:	92 40       	sbci	r25, 0x02	; 2
 1f8:	34 f0       	brlt	.+12     	; 0x206 <ProcessReleasedbutton+0x2c>
			{
				pressed[ButtonReleased]=0;
 1fa:	e8 59       	subi	r30, 0x98	; 152
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	11 82       	std	Z+1, r1	; 0x01
 200:	10 82       	st	Z, r1
				released_confidence_level[ButtonReleased]=0;
 202:	1d 92       	st	X+, r1
 204:	1c 92       	st	X, r1
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
