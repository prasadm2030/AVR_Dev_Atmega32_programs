
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000001cc  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000074  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000130  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a4  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000115  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000d6  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000047  00000000  00000000  00000652  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  74:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ButtonPressed>:
	int pressed_confidence_level[numberofButtons];
	int released_confidence_level[numberofButtons];

	
char ButtonPressed(int ButtonNumber,unsigned char pinOfButton, unsigned char portBit,int confidence_level)
{
  7c:	0f 93       	push	r16
  7e:	1f 93       	push	r17
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8c 01       	movw	r16, r24
  8c:	69 83       	std	Y+1, r22	; 0x01
	
	if (bit_is_set(pinOfButton,portBit))
  8e:	89 81       	ldd	r24, Y+1	; 0x01
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 c0       	rjmp	.+4      	; 0x98 <ButtonPressed+0x1c>
  94:	95 95       	asr	r25
  96:	87 95       	ror	r24
  98:	4a 95       	dec	r20
  9a:	e2 f7       	brpl	.-8      	; 0x94 <ButtonPressed+0x18>
  9c:	f8 01       	movw	r30, r16
  9e:	ee 0f       	add	r30, r30
  a0:	ff 1f       	adc	r31, r31
  a2:	80 ff       	sbrs	r24, 0
  a4:	1c c0       	rjmp	.+56     	; 0xde <ButtonPressed+0x62>
	{
		pressed_confidence_level[ButtonNumber]++;
  a6:	df 01       	movw	r26, r30
  a8:	a0 5a       	subi	r26, 0xA0	; 160
  aa:	bf 4f       	sbci	r27, 0xFF	; 255
  ac:	8d 91       	ld	r24, X+
  ae:	9c 91       	ld	r25, X
  b0:	11 97       	sbiw	r26, 0x01	; 1
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	9c 93       	st	X, r25
  b8:	8e 93       	st	-X, r24
		released_confidence_level[ButtonNumber]=0;
  ba:	ec 59       	subi	r30, 0x9C	; 156
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	11 82       	std	Z+1, r1	; 0x01
  c0:	10 82       	st	Z, r1
		if (pressed_confidence_level[ButtonNumber] > confidence_level)
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	14 f5       	brge	.+68     	; 0x10c <ButtonPressed+0x90>
		{
			if(pressed[ButtonNumber] == 0)
  c8:	f8 01       	movw	r30, r16
  ca:	e8 59       	subi	r30, 0x98	; 152
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	e1 f4       	brne	.+56     	; 0x10c <ButtonPressed+0x90>
			{
				pressed[ButtonNumber] = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
				pressed_confidence_level[ButtonNumber]=0;
  d8:	1d 92       	st	X+, r1
  da:	1c 92       	st	X, r1
  dc:	18 c0       	rjmp	.+48     	; 0x10e <ButtonPressed+0x92>
		}
	}
	
	else
	{
		released_confidence_level[ButtonNumber]++;
  de:	df 01       	movw	r26, r30
  e0:	ac 59       	subi	r26, 0x9C	; 156
  e2:	bf 4f       	sbci	r27, 0xFF	; 255
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	11 96       	adiw	r26, 0x01	; 1
  ee:	9c 93       	st	X, r25
  f0:	8e 93       	st	-X, r24
		pressed_confidence_level[ButtonNumber]=0;
  f2:	e0 5a       	subi	r30, 0xA0	; 160
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
		if (released_confidence_level[ButtonNumber] > confidence_level)
  fa:	28 17       	cp	r18, r24
  fc:	39 07       	cpc	r19, r25
  fe:	34 f4       	brge	.+12     	; 0x10c <ButtonPressed+0x90>
		{
		pressed[ButtonNumber] = 0;
 100:	08 59       	subi	r16, 0x98	; 152
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	f8 01       	movw	r30, r16
 106:	10 82       	st	Z, r1
		released_confidence_level[ButtonNumber]=0;
 108:	1d 92       	st	X+, r1
 10a:	1c 92       	st	X, r1
 10c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
 10e:	0f 90       	pop	r0
 110:	cf 91       	pop	r28
 112:	df 91       	pop	r29
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	08 95       	ret

0000011a <main>:
#include <avr/io.h>
#include "ButtonPress.h"

int main (void)
{
	DDRB = 0b00001100;
 11a:	8c e0       	ldi	r24, 0x0C	; 12
 11c:	87 bb       	out	0x17, r24	; 23
	PORTB = (0 << PINB0)|(0 << PINB1);
 11e:	18 ba       	out	0x18, r1	; 24
	
	while(1)
	{
		if (ButtonPressed(0,PINB, 0,600))
 120:	66 b3       	in	r22, 0x16	; 22
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	28 e5       	ldi	r18, 0x58	; 88
 12a:	32 e0       	ldi	r19, 0x02	; 2
 12c:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonPressed>
 130:	81 11       	cpse	r24, r1
		{
			PORTB|= 1 << PINB2;
 132:	c2 9a       	sbi	0x18, 2	; 24
		}
		
		if (ButtonPressed(1,PINB, 1,600))
 134:	66 b3       	in	r22, 0x16	; 22
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	28 e5       	ldi	r18, 0x58	; 88
 13e:	32 e0       	ldi	r19, 0x02	; 2
 140:	0e 94 3e 00 	call	0x7c	; 0x7c <ButtonPressed>
 144:	88 23       	and	r24, r24
 146:	11 f0       	breq	.+4      	; 0x14c <main+0x32>
		{
			PORTB|= 1 << PINB3;
 148:	c3 9a       	sbi	0x18, 3	; 24
 14a:	ea cf       	rjmp	.-44     	; 0x120 <main+0x6>
		}
		
		else
		{
			PORTB &= 0 << PINB2;
 14c:	88 b3       	in	r24, 0x18	; 24
 14e:	18 ba       	out	0x18, r1	; 24
			PORTB &= 0 << PINB3;
 150:	88 b3       	in	r24, 0x18	; 24
 152:	e5 cf       	rjmp	.-54     	; 0x11e <main+0x4>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
